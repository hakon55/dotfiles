{"id":"67e6b334-0eff-43ec-a201-faca41ac0153","zed":"context","version":"0.4.0","text":"\n\n\nI want to useQuery, give me a basic start\n```tsx shai-vip/src/web/routes/oversikt/Oversikt.tsx\nimport { Pagination } from \"@skatteetaten/ds-navigation\";\nimport { Alert } from \"@skatteetaten/ds-status\";\nimport { useEffect, useRef, useState } from \"react\";\nimport BreadcrumbsContainer from \"web/components/BreadcrumbContainer\";\nimport { SletteModal } from \"./SletteModal\";\nimport { VerktøyLinje } from \"./VerktøyLinje\";\nimport { VipTabell } from \"./VipTabell\";\nimport { VipRespons } from \"./interfaces\";\nimport { hentAlleQuery } from \"./queries\";\nimport { feilMelding } from \"web/felles/meldinger\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport function Oversikt() {\n  const refModal = useRef<HTMLDialogElement>(null);\n\n  const [vipPersoner, setVipPersoner] = useState<VipRespons[]>([]);\n  const [aktivVip, setAktivVip] = useState<VipRespons>();\n  const [søkTekst, setSøkTekst] = useState(\"\");\n\n  const [suksessMelding, setSuksessMelding] = useState<string>(\"\");\n  const [hentAlleError, setHentAlleError] = useState<string>(\"\");\n\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n\n  const settOppState = (vipListe: VipRespons[]) => {\n    setHentAlleError(\"\");\n    setVipPersoner(vipListe);\n  };\n\n  const resetState = () => {\n    setSøkTekst(\"\");\n    setHentAlleError(\"\");\n    setAktivVip(undefined);\n    setVipPersoner([]);\n  };\n\n  useQuery();\n\n  useEffect(() => {\n    hentAlleQuery()\n      .then((response) => {\n        settOppState(response);\n      })\n      .catch((e) => {\n        console.log(e);\n        setHentAlleError(feilMelding(\"hentingen av registeret\"));\n      });\n\n    return () => resetState();\n  }, []);\n\n  const håndterSletting = () => {\n    setSuksessMelding(\n      `${aktivVip?.etternavn} er nå registrert i VIP-registeret`,\n    );\n    setTimeout(() => {\n      setSuksessMelding(\"\");\n    }, 10000);\n\n    setAktivVip(undefined);\n  };\n\n  const visSletteModal = (vip: VipRespons) => {\n    setAktivVip(vip);\n    refModal.current?.showModal();\n  };\n\n  return (\n    <>\n      <BreadcrumbsContainer href=\"/oversikt\" label=\"Oversikt\" />\n\n      <VerktøyLinje setSøkTekst={setSøkTekst} setPageSize={setPageSize} />\n\n      <Alert variant=\"success\" showAlert={!!suksessMelding} className=\"mt-m\">\n        {suksessMelding}\n      </Alert>\n\n      <VipTabell\n        page={page}\n        pageSize={pageSize}\n        søkTekst={søkTekst}\n        vipPersoner={vipPersoner}\n        visSletteModal={visSletteModal}\n      />\n\n      <Alert variant=\"warning\" showAlert={!!hentAlleError} className=\"mt-m\">\n        {hentAlleError}\n      </Alert>\n\n      <Pagination\n        pageSize={pageSize}\n        sibling={3}\n        totalItems={vipPersoner?.length ?? 0}\n        currentPage={page}\n        onChange={(page: number): void => setPage(page)}\n        hidePrevNextButtonTitle\n      />\n\n      <SletteModal\n        refModal={refModal}\n        aktivVip={aktivVip}\n        håndterSletting={håndterSletting}\n      />\n    </>\n  );\n}\n```\n```tsx\n  };\n\n  useQuery();\n// error: Expected 1-2 arguments, but got 0.\n\n  useEffect(() => {\n```\n\n\nTo properly use `useQuery` from the `@tanstack/react-query` library, you need to pass at least one argument, which is a query key. Optionally, you can also provide a function that fetches your data. Here’s how you can modify your code to include these arguments:\n\n```tsx\nimport { useQuery } from \"@tanstack/react-query\";\n\n// ... rest of your component\n\nuseQuery([\"vipPersons\"], async () => {\n  try {\n    const response = await hentAlleQuery();\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}, {\n  onSuccess: (data) => {\n    settOppState(data);\n  },\n  onError: (error) => {\n    setHentAlleError(feilMelding(\"hentingen av registeret\"));\n    console.error(error);\n  }\n});\n\n// ... rest of your component\n```\n\n### Explanation:\n- **Query Key**: `[\"vipPersons\"]` is a unique identifier for the query. React Query will use this key to cache and deduplicate the same queries.\n- **Fetching Function**: The function provided to `useQuery` is an asynchronous function that fetches your data (`hentAlleQuery`). This function can throw errors, which will be caught by the error handling in React Query.\n- **Options Object**:\n  - `onSuccess`: A callback function that runs when the query successfully fetches data. Here, it calls `settOppState` to update the state with the fetched data.\n  - `onError`: A callback function that runs if an error occurs during the query. It logs the error and updates the `hentAlleError` state.\n\nThis setup will ensure that React Query manages the caching of your data and handles errors gracefully, making it easier to manage state in your component.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":208}}},{"id":{"replica_id":0,"value":31},"start":3081,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":209}}},{"id":{"replica_id":0,"value":32},"start":4668,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":210}}}],"summary":"### React Query Setup for Oversikt Component","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":45,"end":3079},"icon":"File","label":"shai-vip/src/web/routes/oversikt/Oversikt.tsx","metadata":{"path":"shai-vip/src/web/routes/oversikt/Oversikt.tsx"}},{"range":{"start":2982,"end":3078},"icon":"XCircle","label":"Expected 1-2 arguments, but got 0.","metadata":null}]}