{"id":"3d213ca4-4ad9-4e38-86c4-87f309259142","zed":"context","version":"0.4.0","text":"\n\n\n\n\n```tsx shai-vip/src/web/routes/registrering/Registrering.tsx\nimport { Alert } from '@skatteetaten/ds-status';\nimport { Paragraph } from '@skatteetaten/ds-typography';\nimport { useRef, useState } from 'react';\nimport { SøkFelt } from './SøkFelt';\nimport { SøkResultat } from './SøkResultat';\nimport { Button } from '@skatteetaten/ds-buttons';\nimport { Modal } from '@skatteetaten/ds-overlays';\nimport { SøkRespons, SøkRequest, registrerQuery } from './queries';\nimport BreadcrumbsContainer from 'web/components/BreadcrumbContainer';\nimport { TextField } from '@skatteetaten/ds-forms';\n\nexport function Registrering() {\n  const [søkResultat, setSøkResultat] = useState<SøkRespons[]>([]);\n  const [søkRequest, setSøkRequest] = useState<SøkRequest>({\n    navn: undefined,\n    fødselsår: undefined,\n  });\n  const [søkError, setSøkError] = useState<string>('');\n\n  const [aktivPerson, setAktivPerson] = useState<SøkRespons>();\n  const [registreringError, setRegistreringError] = useState<string>('');\n  const [suksessMelding, setSuksessMelding] = useState<string>('');\n\n  const refModal = useRef<HTMLDialogElement>(null);\n\n  return (\n    <>\n      <BreadcrumbsContainer href=\"registrering\" label=\"Registrering\" />\n\n      <>\n        <div className=\"mt-m\">\n          <SøkFelt\n            søkRequest={søkRequest}\n            setSøkRequest={setSøkRequest}\n            setSøkResultat={setSøkResultat}\n            setSøkError={setSøkError}\n          />\n          <h3 className=\"my-m\">Søkeresultat</h3>\n          {søkResultat === undefined ? (\n            <i>Søkeresultatene kommer i en tabell her</i>\n          ) : (\n            <>\n              {søkResultat?.length === 0 ? (\n                <Paragraph hasSpacing>\n                  <i>Søket ga ingen resultater</i>\n                </Paragraph>\n              ) : (\n                <SøkResultat\n                  søkResultat={søkResultat}\n                  setAktivPerson={setAktivPerson}\n                  refModal={refModal}\n                />\n              )}\n            </>\n          )}\n        </div>\n\n        <Alert variant=\"neutral\" showAlert={!!søkError} className=\"mt-m\">\n          {søkError}\n        </Alert>\n\n        <Alert variant=\"success\" showAlert={!!suksessMelding} className=\"mt-m\">\n          {suksessMelding}\n        </Alert>\n\n        <Modal ref={refModal} title={'Bekreft registrering'}>\n          <Paragraph hasSpacing>\n            Du registrer nå {aktivPerson?.navn} til VIP registeret\n          </Paragraph>\n          <form\n            onSubmit={async (e: React.FormEvent<HTMLFormElement>) => {\n              e.preventDefault();\n\n              if (!aktivPerson) {\n                setRegistreringError(\n                  'Aktiv person ikke funnet. FIX THIS MESSAGE',\n                );\n                return;\n              }\n\n              await registrerQuery({\n                partsnummer: aktivPerson.partsnummer,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                kommentar: e.currentTarget.kommentar.value as string,\n              })\n                .then((response) => {\n                  console.log(response);\n                  setSøkError('');\n                  setSuksessMelding('Registreringen er gjennomført!');\n                  setTimeout(() => {\n                    setSuksessMelding('');\n                  }, 10000);\n                  setSøkRequest({ navn: undefined, fødselsår: undefined });\n                  setSøkResultat([]);\n                })\n                .catch(() =>\n                  setRegistreringError(\n                    'Noe gikk galt med registreringen. Ta kontakt med Part-teamet om feilen vedvarer',\n                  ),\n                );\n            }}\n          >\n            <TextField\n              label=\"Kommentar\"\n              name=\"kommentar\"\n              required\n              showRequiredMark\n            />\n\n            <Alert\n              variant=\"neutral\"\n              showAlert={!!registreringError}\n              className=\"mt-m\"\n            >\n              {registreringError}\n            </Alert>\n\n            <div className=\"modal-knapper\">\n              <Button type=\"submit\">Registrer</Button>\n              <Button\n                variant={'tertiary'}\n                onClick={(): void => refModal.current?.close()}\n              >\n                {'Avbryt'}\n              </Button>\n            </div>\n          </form>\n        </Modal>\n      </>\n    </>\n  );\n}\n```\n\n\nHow can I refactor everything inside the Modal\n\nTo refactor everything inside the `Modal` component, we can focus on improving readability and separating concerns. Here are some steps and suggestions for refactoring:\n\n1. **Break down the form into smaller components**: This will make it easier to manage and test.\n2. **Use controlled inputs**: Ensure that all inputs are controlled by React state.\n3. **Add validation**: Implement basic client-side validation for the form fields.\n4. **Separate logic from presentation**: Use custom hooks or context if there's any reusable logic.\n\nHere's a refactored version of your `Modal` component:\n\n```tsx\nimport { useRef, useState } from 'react';\nimport { TextField } from '@skatteetaten/ds-forms';\nimport { Button } from '@skatteetaten/ds-buttons';\nimport { Modal } from '@skatteetaten/ds-overlays';\n\ntype ModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (comment: string) => Promise<void>;\n  error?: string;\n};\n\nconst RegistrationForm: React.FC<{ onSubmit: (comment: string) => Promise<void> }> = ({ onSubmit }) => {\n  const [comment, setComment] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      await onSubmit(comment);\n      setError('');\n    } catch (err) {\n      setError('Noe gikk galt med registreringen. Ta kontakt med Part-teamet om feilen vedvarer');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        label=\"Kommentar\"\n        name=\"kommentar\"\n        value={comment}\n        onChange={(e) => setComment(e.target.value)}\n        required\n        showRequiredMark\n      />\n\n      {error && <Alert variant=\"neutral\">{error}</Alert>}\n\n      <div className=\"modal-knapper\">\n        <Button type=\"submit\">Registrer</Button>\n        <Button variant={'tertiary'} onClick={() => setError('')}>\n          Avbryt\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst ModalWrapper: React.FC<ModalProps> = ({ isOpen, onClose, onSubmit, error }) => {\n  return (\n    <Modal ref={useRef<HTMLDialogElement>(null)} title={'Bekreft registrering'} isOpen={isOpen} onRequestClose={onClose}>\n      {error && <Alert variant=\"neutral\">{error}</Alert>}\n      <RegistrationForm onSubmit={onSubmit} />\n    </Modal>\n  );\n};\n\nexport const Registrering: React.FC = () => {\n  // ... existing state and logic ...\n\n  return (\n    <>\n      {/* ... existing JSX ... */}\n      <ModalWrapper\n        isOpen={!!aktivPerson}\n        onClose={() => setAktivPerson(undefined)}\n        onSubmit={(comment) =>\n          registrerQuery({\n            partsnummer: aktivPerson?.partsnummer || '',\n            kommentar: comment,\n          })\n            .then(() => {\n              console.log(response);\n              setSøkError('');\n              setSuksessMelding('Registreringen er gjennomført!');\n              setTimeout(() => {\n                setSuksessMelding('');\n              }, 10000);\n              setSøkRequest({ navn: undefined, fødselsår: undefined });\n              setSøkResultat([]);\n            })\n        }\n        error={registreringError}\n      />\n    </>\n  );\n};\n```\n\n### Explanation:\n\n1. **Separate form logic into `RegistrationForm`**: This component handles the state and submission logic for the form.\n2. **Use `ModalWrapper` to manage modal state**: This component takes care of opening, closing, and passing props to the inner form.\n3. **Pass `error` prop from parent to form**: The error message is passed down to the form so that it can display any errors.\n\nThis refactoring makes the code more modular and easier to maintain. Each component has a single responsibility, which enhances readability and reusability.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":387}}},{"id":{"replica_id":0,"value":47},"start":4541,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":388}}},{"id":{"replica_id":0,"value":48},"start":8235,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":389}}}],"summary":"Refactor Modal Content","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":5,"end":4491},"icon":"File","label":"shai-vip/src/web/routes/registrering/Registrering.tsx","metadata":{"path":"shai-vip/src/web/routes/registrering/Registrering.tsx"}}]}